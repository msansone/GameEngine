/* -------------------------------------------------------------------------
** GameButtonManager.hpp
**
** The GameButtonManager class maps the button names defined in the editor
** to the ID value, also generated by the editor, and provides an interface 
** for the user to enumerate them.
**
** Author: Mike Sansone
** ------------------------------------------------------------------------- */

#ifndef _GAMEBUTTONMANAGER_HPP_
#define _GAMEBUTTONMANAGER_HPP_

#if defined(FIREMELON_EXPORTS)
#   define FIREMELONAPI   __declspec(dllexport)
#else
#   define FIREMELONAPI   __declspec(dllimport)
#endif  // FIREMELON_EXPORTS

#include <boost/lexical_cast.hpp>

#include <string>
#include <vector>
#include <map>

#include "BaseIds.hpp"
#include "PythonGil.hpp"

namespace firemelon
{
	class FIREMELONAPI GameButtonManager
	{
	public:
		friend class InputDevice;
		friend class Assets;

		GameButtonManager();
		~GameButtonManager();

		int					getGameButtonGroupCountPy();
		int					getGameButtonGroupCount();

		int					getGameButtonCountPy();
		int					getGameButtonCount();

		int					getGameButtonCountForGroupPy(GameButtonGroupId groupId);
		int					getGameButtonCountForGroup(GameButtonGroupId groupId);

		GameButtonId		getGameButtonIdPy(int index);
		GameButtonId		getGameButtonId(int index);

		GameButtonGroupId	getGameButtonGroupIdPy(int index);
		GameButtonGroupId	getGameButtonGroupId(int index);

		GameButtonGroupId	getGameButtonGroupIdForButtonPy(GameButtonId buttonId);
		GameButtonGroupId	getGameButtonGroupIdForButton(GameButtonId buttonId);

		GameButtonId		getGameButtonIdForGroupPy(GameButtonGroupId groupId, int index);
		GameButtonId		getGameButtonIdForGroup(GameButtonGroupId groupId, int index);

		GameButtonUuid		getGameButtonUuid(int index);
		
		std::string			getGameButtonUuidStringPy(int index);
		std::string			getGameButtonUuidString(int index);

		std::string			getGameButtonNamePy(GameButtonId buttonId);
		std::string			getGameButtonName(GameButtonId buttonId);

		std::string			getGameButtonLabelPy(GameButtonId buttonId);
		std::string			getGameButtonLabel(GameButtonId buttonId);

		std::string			getGameButtonGroupNamePy(GameButtonGroupId groupId);
		std::string			getGameButtonGroupName(GameButtonGroupId groupId);

	private:

		// --- Data Types ---

		struct GameButton
		{
			GameButtonId		id;
			GameButtonUuid		uuid;
			GameButtonGroupId	group;
			std::string			name;
			std::string			label;
		};

		struct GameButtonGroup
		{
			GameButtonGroupId	id;
			GameButtonGroupUuid	uuid;
			std::string			name;
		};

		typedef std::vector<GameButton>									ButtonList;
		typedef std::vector<GameButtonGroup>							ButtonGroupList;
		typedef std::map<GameButtonId, std::string>						ButtonNameIdMap;
		typedef std::map<GameButtonGroupId, std::string>				ButtonGroupNameIdMap;
		typedef std::map<GameButtonGroupId, std::vector<GameButton>>	ButtonGroupToButtonListMap;

		// --- Functions ---

		void							addButtonNameIdMapping(GameButtonId buttonId, 
															   GameButtonUuid buttonUuid, 
															   GameButtonGroupId buttonGroupId,
															   std::string buttonName,
															   std::string buttonLabel);

		void							addButtonGroupNameIdMapping(GameButtonGroupId buttonGroupId,
													      		    GameButtonGroupUuid buttonGroupUuid,
																	std::string buttonName);

		// --- Data Members ---

		// Map a button ID to a string name.
		ButtonNameIdMap				gameButtonNameIdMap_;

		ButtonNameIdMap				gameButtonLabelIdMap_;

		// Map a button group ID to a string name.
		ButtonGroupNameIdMap		groupNameIdMap_;

		// Random access list of the game button groups, so they can be looped
		// through externally without exposing implementation details.
		ButtonGroupList				gameButtonGroups_;

		// Random access list of the game buttons, so they can be looped
		// through externally without exposing implementation details.
		ButtonList					gameButtons_;

		// Random access list of the game buttons, accessible by group, so they can be looped
		// through externally without exposing implementation details.
		ButtonGroupToButtonListMap	groupToButtonsMap_;
	};
}

#endif // _GAMEBUTTONMANAGER_HPP_
